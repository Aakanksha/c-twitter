NOTES (things I am learning along the way)
======================================================================================

------------------------------------
	C
------------------------------------

General:
- Said to be the best book for learning c: http://www.amazon.com/Programming-Language-2nd-Brian-Kernighan/dp/0131103628/ref=wl_it_dp_o?ie=UTF8&coliid=I1FB815BF2216Z&colid=24SAYWVYQ7SWK
- Download PDF for free: http://www.inf.unideb.hu/grafika/eng/rtornai/Kernighan_Ritchie_Language_C.pdf

c compiling / linking:
- Excellent article on compiling and linking in c: http://www.yolinux.com/TUTORIALS/LibraryArchives-StaticAndDynamic.html
- When referencing .h files in the .c files they are there for the compiler not in the PHP include sense (which is a direct file include)
- The actual compiled shared libraries (.so and .a) for the os at /usr/lib
- If you need to reference a library that is not in the default reference path (how you find the default paths?) you need to add the -l<name> to the linker
- Also adding this may work: gcc curlexample.c -L/usr/lib/libcurl.so -lcurl

Variables, Pointers and Memory allocation:
- http://staff.um.edu.mt/csta1/courses/lectures/csa2060/c8a.html
- Read this helpful article for understanding pointers and memory management: http://theocacao.com/document.page/234
- See "Variables" and "Pointers" at: http://www.cprogramming.com/reference/

Working with strings:
- most helpful line I have found: To get the address of an array, you simply use the array name, which stores the memory location of the first value in the array. Note that while using the name of the array causes it to act like a pointer, unlike a regular pointer, it is constant.
	Example:
		char *name = "hello"; // declaring a pointer type which is a array with characters, the astrick(*) is defining the type as pointer
		name; // pointer by default, not necessary to use *name; for dereferencing since the variable is the pointer and the brakets grab the value unlike normal types
		// derefrencing isn't necessary, to get the first letter you just
		name[0]; // grabs the first element in the array's value

command-line tools for c:
	// compiles files
	gcc -o <output> <file1.c> <file2.c> -L<libdir> -l<lib1> -l<lib2>
	gcc -c <file1.c> -> file1.o // create object files
	// gnu linker
	ld
	// get a list of files in a library
	ar -t <file1.a>
	// get a list of dependencies
	ldd <library1>


Compiling and install cUrl:
- http://curl.haxx.se/docs/install.html

Doxygen (documentation in c):
- http://www.stack.nl/~dimitri/doxygen/starting.html

liboauth (twitter recommended OAuth c library):
- http://liboauth.sourceforge.net/
- Compiling OAuth Exmaples wouldn't build until I ran: sudo lsconfig

------------------------------------
	Cygwin
------------------------------------

Problems compiling on Cygwin:
- http://cygwin.com/ml/cygwin/2004-11/msg00289.html
- http://curl.haxx.se/mail/archive-2009-01/0088.html

Problem with Git / Cygwin:
- I had trouble with pulling from Github earlier today. Error was: early EOFs, http://support.github.com/discussions/repos/4223-git-clone-fails-remote-hung-up-unexpectedly-eof-index-pack-failed

------------------------------------
	Twitter
------------------------------------

Twitter Docs:
- http://dev.twitter.com/doc
- http://dev.twitter.com/pages/auth
- http://apiwiki.twitter.com/w/page/22554643/Authentication
- http://apiwiki.twitter.com/w/page/22554657/OAuth-Examples (examples)
- http://apiwiki.twitter.com/w/page/22554727/Twitter-REST-API-Method:-oauth-request_token
- http://apiwiki.twitter.com/w/page/22554724/Twitter-REST-API-Method:-oauth-access_token

Twitter OOB Method:
- http://apiwiki.twitter.com/w/page/22554726/Twitter-REST-API-Method:-oauth-authorize

Authorization Header:
- http://oauth.net/core/1.0/#auth_header

Using OAuth with non-browser app:
1. The application uses oauth/request_token to obtain a request token from twitter.com.
2. The application directs the user to oauth/authorize on twitter.com.
3. After obtaining approval from the user, a prompt on twitter.com will display a 7 digit PIN.
4. The user is instructed to copy this PIN and return to the appliction.
5. The application will prompt the user to enter the PIN from step 4.
6. The application uses the PIN as the value for the oauth_verifier parameter in a call to oauth/access_token which will verify the PIN and exchange a request_token for an access_token.
7. Twitter will return an access_token for the application to generate subsequent OAuth signatures.

------------------------------------
	OAuth
------------------------------------

General:
- http://oauth.net
- http://tools.ietf.org/html/rfc5849
- http://hueniverse.com/oauth/

Cryptography / Signing (Twitter uses HMAC-SHA-1):
- Hash-based Message Authentication Code or HMAC is only as strong as the cryptographic algorithm of the underlying hash function
- HMAC, http://en.wikipedia.org/wiki/HMAC (same as MAC but adds a secret key)
- MAC, http://en.wikipedia.org/wiki/Message_authentication_code (ensures data integrity and authorship)
- SHA-1, http://en.wikipedia.org/wiki/SHA-1
